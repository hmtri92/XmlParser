<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC
        "-//Hibernate/Hibernate Mapping DTD//EN"
       "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">

<hibernate-mapping default-lazy="false">
	<!-- SR-IERS-IERRS-11-02 added association with candidate so that we can easily get the email for import singpost file -->
	<class name="sg.gov.seab.iers.model.Registration" table="TB_REGISTRATION" optimistic-lock="version">
		<id name="id" type="java.lang.Long" column="ID" unsaved-value="null">
			<generator class="sequence">
				<param name="sequence">REGISTRATION_SEQ</param>
			</generator>
		</id>
		<version name="version" column="VERSION" generated="never"/>		
		<!-- <property name="candidateId" column="CANDIDATEID" type="java.lang.Long"/> -->
		<property name="examLevelCode" column="EXAMLEVELCODE" />		
		<property name="examLevel" column="EXAMLEVEL"/>
		<property name="name" column="NAME"/>
		<property name="status" column="STATUS"/>
		<property name="singPostStatus" column="SINGPOST_STATUS"/>
		<property name="legalId" column="LEGALID"/>
		<property name="subjectCount" column="SUBJECTCOUNT" type="int"/>

		<property name="creator" column="CREATEDBY"/>
		<property name="dateCreated" column="DATECREATED" type="timestamp"/>		
		<property name="updater" column="UPDATEDBY"/>
		<property name="dateUpdated" column="DATEUPDATED" type="timestamp"/>
		
		<!-- SR-IERS-12-01 fagujetas 12122012 add financial aid column -->
		<property name="financialAidFlag" column="FINANCIALAIDFLAG"/> 
        <!-- SR-IERS-13-08 capture when and who tagged the candidate -->    
        <property name="taggedBy" column="TAGGEDBY"/>
        <property name="dateTagged" column="DATETAGGED"/>
		<property name="remindered" column="REMINDERED"/>
		<property name="remindAddSubj" column="REMINDADDSUBJ"/>
        
		<set name="registeredSubjects" inverse="true" cascade="all-delete-orphan">
			<key column="REGISTRATIONID" not-null="true"/>
			<one-to-many class="sg.gov.seab.iers.model.RegisteredSubject"/>
      	</set>

		<set name="payments" inverse="true" cascade="all-delete-orphan" sort="sg.gov.seab.iers.model.PaymentComparator">
			<key column="REGISTRATIONID" not-null="true"/>
			<one-to-many class="sg.gov.seab.iers.model.Payment"/>
      	</set>

        <!-- SR-IERS-13-08 not needed anymore  -->
        <!-- 
		<set name="refunds" inverse="true" cascade="all-delete-orphan" sort="sg.gov.seab.iers.model.RefundComparator">
			<key column="REGISTRATIONID" not-null="true"/>
			<one-to-many class="sg.gov.seab.iers.model.Refund"/>
      	</set>
		 -->
		 
		<many-to-one name="candidate" 
					class="sg.gov.seab.iers.model.Candidate" 
					not-null="false"
					column="CANDIDATEID"/>
 	</class>
	
	<class name="sg.gov.seab.iers.model.RegisteredSubject" table="TB_REG_SUBJECT">
		<id name="id" type="java.lang.Long" column="ID" />
		<version name="version" column="VERSION" generated="never"/>
		
		<property name="subjectId" column="SUBJECTID" type="java.lang.Long"/>
		<property name="code" column="CODE"/>
		<property name="name" column="NAME"/>
		<property name="mediumCode" column="MEDIUM"/>
		<property name="status" column="STATUS"/>
		<property name="midYearIndicator" column="MIDYEARINDICATOR"/>
		<property name="paperOptions" column="PAPEROPTIONS"/>
		<property name="paperDisplay" column="PAPERDISPLAY"/>
		<property name="paperOptionsHistory" column="PAPEROPTIONSHISTORY"/>
		<property name="paperDisplayHistory" column="PAPERDISPLAYHISTORY"/>		
		<property name="subjectFee" column="SUBJECTFEE" type="big_decimal"/>
		<property name="refundSubjectFee" column="REFUNDSUBJECTFEE" type="big_decimal"/>

		<property name="creator" column="CREATEDBY"/>
		<property name="dateCreated" column="DATECREATED" type="timestamp"/>		
		<property name="updater" column="UPDATEDBY"/>
		<property name="dateUpdated" column="DATEUPDATED" type="timestamp"/>

        <many-to-one name="registration"
                     class="sg.gov.seab.iers.model.Registration"
                     column="REGISTRATIONID"
                     not-null="false" />
	</class>
	
   <class name="sg.gov.seab.iers.model.RegSubjectAudit" table="TB_REG_SUBJECT_AUDIT" optimistic-lock="version">
        <id name="id" column="ID" type="java.lang.Long"/>
        <property name="transId" column="TRANSID" type="java.lang.Long"/>
        <property name="regSubjectId" column="REGSUBJECTID" type="java.lang.Long"/>
        <property name="timestamp" column="TIMESTAMP" type="timestamp"/>
        <property name="who" column="WHO"/>
        <property name="columnName" column="COLUMNNAME"/>
        <property name="oldValue" column="OLDVALUE"/>
        <property name="newValue" column="NEWVALUE"/>
        <property name="dataType" column="DATATYPE"/>
        <property name="dataLength" column="DATALENGTH" type="java.lang.Long"/>
        <property name="dataPrecision" column="DATAPRECISION" type="java.lang.Long"/>
        <property name="dataScale" column="DATASCALE" type="java.lang.Long"/>
        <property name="action" column="ACTION"/>
    </class>
	
	
	<class name="sg.gov.seab.iers.model.Payment" table="TB_PAYMENT" optimistic-lock="version">
		<id name="id" type="java.lang.Long" column="ID" unsaved-value="null">
			<generator class="sequence">
				<param name="sequence">PAYMENT_SEQ</param>
			</generator>
		</id>
		<version name="version" column="VERSION" generated="never"/>
		
		<property name="itemIds" column="ITEMIDS"/>
		<property name="offsetItemIds" column="OFFSETITEMIDS"/>		
		
		<property name="refNo" column="REFERENCENO"/>
		<property name="paymentRef" column="PAYMENTREFERENCE"/>
		<property name="status" column="STATUS"/>
		<property name="dateIssued" column="DATEISSUED" type="timestamp"/>
		<property name="dateSettled" column="DATESETTLED" type="timestamp"/>
		
		<property name="basicFee" column="BASICFEE" type="big_decimal"/>
		<property name="cambridgeBasicFee" column="CAMBRIDGEBASICFEE" type="big_decimal"/>		
		<property name="subjectFee" column="SUBJECTFEE" type="big_decimal"/>		
		<property name="amendmentFee" column="AMENDMENTFEE" type="big_decimal"/>
		<property name="lateEntryFee" column="LATEENTRYFEE" type="big_decimal"/>
		<property name="gst" column="GST" type="big_decimal"/>
		<property name="gstRounded" column="GSTROUNDED" type="big_decimal"/>
		<property name="gstDifference" column="GSTDIFFERENCE" type="big_decimal"/>
		
		<property name="offsetBasicFee" column="REFUNDBASICFEE" type="big_decimal"/>
		<property name="offsetCambridgeBasicFee" column="REFUNDCAMBRIDGEBASICFEE" type="big_decimal"/>
		<property name="offsetSubjectFee" column="REFUNDSUBJECTFEE" type="big_decimal"/>
		<property name="offsetAmendmentFee" column="REFUNDAMENDMENTFEE" type="big_decimal"/>
		<property name="offsetLateEntryFee" column="REFUNDLATEENTRYFEE" type="big_decimal"/>
		<property name="offsetGst" column="REFUNDGST" type="big_decimal"/>
		<property name="offsetGstRounded" column="REFUNDGSTROUNDED" type="big_decimal"/>
		<property name="offsetGstDifference" column="REFUNDGSTDIFFERENCE" type="big_decimal"/>
		
		<property name="total" column="TOTAL" type="big_decimal"/>
		<property name="totalOffset" column="TOTALREFUND" type="big_decimal"/>
		<property name="amountSettled" column="AMOUNTSETTLED" type="big_decimal"/>
		<property name="balance" column="BALANCE" type="big_decimal"/>
		
		<property name="mode" column="PAYMENTMODE"/>
		<property name="collectionAgency" column="COLLECTIONAGENCY"/>
 
		<property name="creator" column="CREATEDBY"/>
		<property name="dateCreated" column="DATECREATED" type="timestamp"/>		
		<property name="updater" column="UPDATEDBY"/>
		<property name="dateUpdated" column="DATEUPDATED" type="timestamp"/>
		
		<property name="regPeriodCode" column="REGPERIODCODE"/>
		<property name="receiptNumber" column="RECEIPT_NUMBER"/>
		<property name="remindered" column="REMINDERED"/>
 
        <many-to-one name="registration"
                     class="sg.gov.seab.iers.model.Registration"
                     column="REGISTRATIONID"
                     not-null="false"/>
                     
  	    <one-to-one name="paymentApproval" 
  	    			class="sg.gov.seab.iers.model.PaymentApproval" 
  	    			property-ref="payment" 
  	    			cascade="delete"/>
  	    			
		<set name="enetsPayment" table="TB_ENETS_PAYMENT" mutable="true"
				inverse="true" lazy="true" cascade="all-delete-orphan">
			<key>
				<column name="PAYMENTID" not-null="true"/>
			</key>
			<one-to-many class="sg.gov.seab.iers.model.EnetsPayment"/>
		</set>
        
	</class>
	
	<!--  SR-IERS-13-08 not needed anymore -->
	<!-- 
	<class name="sg.gov.seab.iers.model.Refund" table="TB_REFUND" optimistic-lock="version">
		<id name="id" type="java.lang.Long" column="ID" unsaved-value="null">
			<generator class="sequence">
				<param name="sequence">REFUND_SEQ</param>
			</generator>
		</id>
		<version name="version" column="VERSION" generated="never"/>		
		
		<property name="itemIds" column="ITEMIDS"/>
		<property name="offsetItemIds" column="OFFSETITEMIDS"/>		
		
		<property name="refNo" column="REFERENCENO"/>
		<property name="status" column="STATUS"/>
		<property name="dateIssued" column="DATEISSUED" type="timestamp"/>
		<property name="dateSettled" column="DATESETTLED" type="timestamp"/>
		
		<property name="basicFee" column="BASICFEE" type="big_decimal"/>
		<property name="cambridgeBasicFee" column="CAMBRIDGEBASICFEE" type="big_decimal"/>		
		<property name="subjectFee" column="SUBJECTFEE" type="big_decimal"/>		
		<property name="amendmentFee" column="AMENDMENTFEE" type="big_decimal"/>
		<property name="lateEntryFee" column="LATEENTRYFEE" type="big_decimal"/>
		<property name="gst" column="GST" type="big_decimal"/>
		<property name="gstRounded" column="GSTROUNDED" type="big_decimal"/>
		<property name="gstDifference" column="GSTDIFFERENCE" type="big_decimal"/>
		
		<property name="offsetBasicFee" column="REFUNDBASICFEE" type="big_decimal"/>
		<property name="offsetCambridgeBasicFee" column="REFUNDCAMBRIDGEBASICFEE" type="big_decimal"/>
		<property name="offsetSubjectFee" column="REFUNDSUBJECTFEE" type="big_decimal"/>
		<property name="offsetAmendmentFee" column="REFUNDAMENDMENTFEE" type="big_decimal"/>
		<property name="offsetLateEntryFee" column="REFUNDLATEENTRYFEE" type="big_decimal"/>
		<property name="offsetGst" column="REFUNDGST" type="big_decimal"/>
		<property name="offsetGstRounded" column="REFUNDGSTROUNDED" type="big_decimal"/>
		<property name="offsetGstDifference" column="REFUNDGSTDIFFERENCE" type="big_decimal"/>
		
		<property name="total" column="TOTAL" type="big_decimal"/>
		<property name="totalOffset" column="TOTALREFUND" type="big_decimal"/>
		<property name="amountSettled" column="AMOUNTSETTLED" type="big_decimal"/>
		<property name="balance" column="BALANCE" type="big_decimal"/>
		<property name="recoverOffset" column="RECOVEROFFSET" type="big_decimal"/>		
		<property name="batchId" column="BATCHID"/>

		<property name="creator" column="CREATEDBY"/>
		<property name="dateCreated" column="DATECREATED" type="timestamp"/>		
		<property name="updater" column="UPDATEDBY"/>
		<property name="dateUpdated" column="DATEUPDATED" type="timestamp"/>

        <many-to-one name="registration"
                     class="sg.gov.seab.iers.model.Registration"
                     column="REGISTRATIONID"
                     not-null="true"/>
	</class>
	 -->
	
	<!-- SR-IERS-11-02 add approval payment -->
        <class name="sg.gov.seab.iers.model.PaymentApproval" table="TB_PAYMENT_APPROVAL" optimistic-lock="version">
		<id name="id" type="java.lang.Long" column="ID" unsaved-value="null">
			<generator class="sequence">
				<param name="sequence">PAYMENT_APP_SEQ</param>
			</generator>
		</id>
              			
		<property name="status" column="STATUS"/>
		<property name="dateSettled" column="DATESETTLED" type="timestamp"/>
		<property name="amountSettled" column="AMOUNTSETTLED" type="big_decimal"/>
		<property name="balance" column="BALANCE" type="big_decimal"/>
		
		<property name="mode" column="PAYMENTMODE"/>
		<property name="collectionAgency" column="COLLECTIONAGENCY"/>
                <property name="paymentRef" column="PAYMENTREFERENCE"/>
		<property name="creator" column="CREATEDBY"/>
		<property name="dateCreated" column="DATECREATED" type="timestamp"/>		
		<property name="updater" column="UPDATEDBY"/>
		<property name="dateUpdated" column="DATEUPDATED" type="timestamp"/>
        <!-- <property name="paymentId" column="PAYMENTID" /> -->
        <property name="registrationId" column="REGISTRATIONID"/>
        <property name="paymentUpdateMode" column="PAYMENT_UPDATE_MODE"/>
        	    
	    <many-to-one name="payment" 
        			class="sg.gov.seab.iers.model.Payment" 
        			column="PAYMENTID" 
        			unique="true"
        			not-null="false"/>
	</class>
        
    <!-- SR-IERS-12-01 ACRHIVE tables -->    
 	<class name="sg.gov.seab.iers.model.RegistrationArchive" table="TB_REGISTRATION_ARCHIVE" optimistic-lock="version">
		<id name="id" type="java.lang.Long" column="ID" unsaved-value="null">
			<generator class="sequence">
				<param name="sequence">REGISTRATION_SEQ</param>
			</generator>
		</id>
		<version name="version" column="VERSION" generated="never"/>		
		<!-- <property name="candidateId" column="CANDIDATEID" type="java.lang.Long"/> -->
		<property name="examLevelCode" column="EXAMLEVELCODE" />		
		<property name="examLevel" column="EXAMLEVEL"/>
		<property name="name" column="NAME"/>
		<property name="status" column="STATUS"/>
		<property name="singPostStatus" column="SINGPOST_STATUS"/>
		<property name="legalId" column="LEGALID"/>
		<property name="subjectCount" column="SUBJECTCOUNT" type="int"/>

		<property name="creator" column="CREATEDBY"/>
		<property name="dateCreated" column="DATECREATED" type="timestamp"/>		
		<property name="updater" column="UPDATEDBY"/>
		<property name="dateUpdated" column="DATEUPDATED" type="timestamp"/>
		<property name="archivedBy" column="ARCHIVEDBY"/>
		<property name="dateArchived" column="DATEARCHIVED" type="timestamp"/>
		
		<property name="financialAidFlag" column="FINANCIALAIDFLAG"/> 
        <!-- SR-IERS-13-08 capture when and who tagged the candidate -->    
        <property name="taggedBy" column="TAGGEDBY"/>
        <property name="dateTagged" column="DATETAGGED"/>
        
		<set name="registeredSubjects" inverse="true" cascade="all-delete-orphan">
			<key column="REGISTRATIONID" not-null="true"/>
			<one-to-many class="sg.gov.seab.iers.model.RegisteredSubjectArchive"/>
      	</set>

		<set name="payments" inverse="true" cascade="all-delete-orphan" sort="sg.gov.seab.iers.model.PaymentArchiveComparator">
			<key column="REGISTRATIONID" not-null="true"/>
			<one-to-many class="sg.gov.seab.iers.model.PaymentArchive"/>
      	</set>
      	
		<many-to-one name="candidate" 
					class="sg.gov.seab.iers.model.CandidateArchive" 
					not-null="false"
					column="CANDIDATEID"/>
	
 	</class>
 	
 	<class name="sg.gov.seab.iers.model.RegisteredSubjectArchive" table="TB_REG_SUBJECT_ARCHIVE">
		<id name="id" type="java.lang.Long" column="ID" />
		<version name="version" column="VERSION" generated="never"/>
		
		<property name="subjectId" column="SUBJECTID" type="java.lang.Long"/>
		<property name="code" column="CODE"/>
		<property name="name" column="NAME"/>
		<property name="mediumCode" column="MEDIUM"/>
		<property name="status" column="STATUS"/>
		<property name="midYearIndicator" column="MIDYEARINDICATOR"/>
		<property name="paperOptions" column="PAPEROPTIONS"/>
		<property name="paperDisplay" column="PAPERDISPLAY"/>
		<property name="paperOptionsHistory" column="PAPEROPTIONSHISTORY"/>
		<property name="paperDisplayHistory" column="PAPERDISPLAYHISTORY"/>		
		<property name="subjectFee" column="SUBJECTFEE" type="big_decimal"/>
		<property name="refundSubjectFee" column="REFUNDSUBJECTFEE" type="big_decimal"/>

		<property name="creator" column="CREATEDBY"/>
		<property name="dateCreated" column="DATECREATED" type="timestamp"/>		
		<property name="updater" column="UPDATEDBY"/>
		<property name="dateUpdated" column="DATEUPDATED" type="timestamp"/>
		
		<property name="archivedBy" column="ARCHIVEDBY"/>
		<property name="dateArchived" column="DATEARCHIVED" type="timestamp"/>

        <many-to-one name="registration"
                     class="sg.gov.seab.iers.model.RegistrationArchive"
                     column="REGISTRATIONID"
                     not-null="false" />
	</class>
	
	<class name="sg.gov.seab.iers.model.PaymentArchive" table="TB_PAYMENT_ARCHIVE" optimistic-lock="version">
		<id name="id" type="java.lang.Long" column="ID" unsaved-value="null">
			<generator class="sequence">
				<param name="sequence">PAYMENT_SEQ</param>
			</generator>
		</id>
		<version name="version" column="VERSION" generated="never"/>
		
		<property name="itemIds" column="ITEMIDS"/>
		<property name="offsetItemIds" column="OFFSETITEMIDS"/>		
		
		<property name="refNo" column="REFERENCENO"/>
		<property name="paymentRef" column="PAYMENTREFERENCE"/>
		<property name="status" column="STATUS"/>
		<property name="dateIssued" column="DATEISSUED" type="timestamp"/>
		<property name="dateSettled" column="DATESETTLED" type="timestamp"/>
		
		<property name="basicFee" column="BASICFEE" type="big_decimal"/>
		<property name="cambridgeBasicFee" column="CAMBRIDGEBASICFEE" type="big_decimal"/>		
		<property name="subjectFee" column="SUBJECTFEE" type="big_decimal"/>		
		<property name="amendmentFee" column="AMENDMENTFEE" type="big_decimal"/>
		<property name="lateEntryFee" column="LATEENTRYFEE" type="big_decimal"/>
		<property name="gst" column="GST" type="big_decimal"/>
		<property name="gstRounded" column="GSTROUNDED" type="big_decimal"/>
		<property name="gstDifference" column="GSTDIFFERENCE" type="big_decimal"/>
		
		<property name="offsetBasicFee" column="REFUNDBASICFEE" type="big_decimal"/>
		<property name="offsetCambridgeBasicFee" column="REFUNDCAMBRIDGEBASICFEE" type="big_decimal"/>
		<property name="offsetSubjectFee" column="REFUNDSUBJECTFEE" type="big_decimal"/>
		<property name="offsetAmendmentFee" column="REFUNDAMENDMENTFEE" type="big_decimal"/>
		<property name="offsetLateEntryFee" column="REFUNDLATEENTRYFEE" type="big_decimal"/>
		<property name="offsetGst" column="REFUNDGST" type="big_decimal"/>
		<property name="offsetGstRounded" column="REFUNDGSTROUNDED" type="big_decimal"/>
		<property name="offsetGstDifference" column="REFUNDGSTDIFFERENCE" type="big_decimal"/>
		
		<property name="total" column="TOTAL" type="big_decimal"/>
		<property name="totalOffset" column="TOTALREFUND" type="big_decimal"/>
		<property name="amountSettled" column="AMOUNTSETTLED" type="big_decimal"/>
		<property name="balance" column="BALANCE" type="big_decimal"/>
		
		<property name="mode" column="PAYMENTMODE"/>
		<property name="collectionAgency" column="COLLECTIONAGENCY"/>
 
		<property name="creator" column="CREATEDBY"/>
		<property name="dateCreated" column="DATECREATED" type="timestamp"/>		
		<property name="updater" column="UPDATEDBY"/>
		<property name="dateUpdated" column="DATEUPDATED" type="timestamp"/>
		
		<property name="archivedBy" column="ARCHIVEDBY"/>
		<property name="dateArchived" column="DATEARCHIVED" type="timestamp"/>
    
        <property name="regPeriodCode" column="REGPERIODCODE"/>
        
        <many-to-one name="registration"
                     class="sg.gov.seab.iers.model.RegistrationArchive"
                     column="REGISTRATIONID"
                     not-null="false"/>
	</class>
	   
     
	<!-- Sequence queries -->
	
	<sql-query name="paymentRefNoSequenceQuery">
		<return-scalar column="value" type="int"/>
			<![CDATA[
				select PAYMENT_REF_SEQ.nextval as value from sys.dual
	   		]]>
	</sql-query>
	
	<sql-query name="refundRefNoSequenceQuery">
		<return-scalar column="value" type="int"/>
			<![CDATA[
				select REFUND_REF_SEQ.nextval as value from sys.dual
	   		]]>
	</sql-query>
	
	<sql-query name="refundFileRefNoSequenceQuery">
		<return-scalar column="value" type="int"/>
			<![CDATA[
				select REFUND_FILE_REF_SEQ.nextval as value from sys.dual
	   		]]>
	</sql-query>
	
	<sql-query name="regSubjectSequenceQuery">
		<return-scalar column="value" type="long"/>
			<![CDATA[
				select REG_SUBJECT_SEQ.nextval as value from sys.dual
	   		]]>
	</sql-query>
	
	<!-- Search queries -->

	<query name="getAllRegistrations">
		<![CDATA[
			select r from Registration r where r.candidate.id = ? 
   		]]>
   	</query>
   	
   	<sql-query name="getAllRegistrationsForCandidateWithRegSubj">
   		 <return alias="r" class="sg.gov.seab.iers.model.Registration"/>
		<![CDATA[
			select r.* from TB_REGISTRATION r, TB_EXAM_LEVEL e
			where r.examLevelCode = e.code(+)
			and r.candidateId = ? 
			and r.subjectCount > 0
			order by e.displayOrder
   		]]>
   	</sql-query>     
   	
   	<sql-query name="getAllRegistrationsForCandidateWithArchivedSubjReg">
   		 <return alias="ra" class="sg.gov.seab.iers.model.RegistrationArchive"/>
		<![CDATA[
			select ra.* from TB_REGISTRATION_ARCHIVE ra, TB_EXAM_LEVEL e
			where ra.examLevelCode = e.code(+)
			and ra.candidateId = ? 
			and ra.subjectCount > 0
			order by e.displayOrder
   		]]>
   	</sql-query>     	
	
	<query name="getRegistrationAndCandidate">
		<![CDATA[
			select r, c from Registration r, Candidate c
			where r.id = ? 
			and r.candidate.id = c.id
   		]]>
   	</query>
	
	<query name="getRegistrationByUserIdExamLevel">
		<![CDATA[
			select r from Registration r, Candidate c, User u
			where u.id = ? 
			and u.id = c.userId
			and c.id = r.candidate.id and r.examLevelCode = ? 
   		]]>
   	</query>
   	
	<query name="getRegistrationByCandidateIdExamLevel">
		<![CDATA[
			select r from Registration r
			where r.candidate.id = ? and r.examLevelCode = ? 
   		]]>
   	</query>
   	   	
   	<!-- Refund File Generation -->
   	<!-- 
	<query name="getRegistrationIdsWithPendingRefund">
		<![CDATA[
			select r.id from Registration r, Candidate c
			where exists elements (r.refunds) 
			and r.candidate.id = c.id
  		]]>
   	</query>
   	
	<query name="getRegistrationByIdWithPendingRefund">
		<![CDATA[
			select r from Registration r, Candidate c
			where r.id = ? 
			and r.candidate.id = c.id
   		]]>
   	</query>
   	 -->
   	 
	<!-- SingPost File Generation -->
	
	<!-- Optimized on 23/11/2008 -->
   		
	<sql-query name="getSinglePaymentRegistrationForSingPostFileGeneration">
		<return-scalar column="legalid" type="string"/>
		<return-scalar column="id" type="java.lang.Long"/>
		<return-scalar column="examLevelCode" type="string"/>
		<return-scalar column="referenceNo" type="string"/>
		<return-scalar column="balance" type="big_decimal"/>
		<return-scalar column="paymentCount" type="long"/>
			<![CDATA[
				SELECT t.legalid, t2.id, t2.examlevelcode, 
				t3.referenceno, t3.balance, COUNT(t3.id) as paymentCount
				FROM tb_candidate t, tb_registration t2, tb_payment t3
				WHERE t.privateCentreId = ?
				AND t.id = t2.candidateId
				AND t2.subjectcount > 0
				AND t2.id = t3.registrationid
		        AND t3.status = ?
		        AND t3.collectionagency = ?
				GROUP BY t.legalid, t2.id, t2.examlevelcode, 
				t3.referenceno, t3.balance
				HAVING COUNT(t3.id) = 1
	   		]]>
	</sql-query>
   		
	<sql-query name="getMultiplePaymentRegistrationForSingPostFileGeneration">
		<return-scalar column="legalid" type="string"/>
		<return-scalar column="id" type="java.lang.Long"/>
		<return-scalar column="paymentCount" type="long"/>
			<![CDATA[
				SELECT t.legalid, t2.id, COUNT(t3.id) as paymentCount
				FROM tb_candidate t, tb_registration t2, tb_payment t3
				WHERE t.privateCentreId = ?
				AND t.id = t2.candidateId
				AND t2.subjectcount > 0
				AND t2.id = t3.registrationid
				AND t3.status = ?
		        AND t3.collectionagency = ?
				GROUP BY t.legalid, t2.id
				HAVING COUNT(t3.id) > 1
	   		]]>
	</sql-query>   	
   	
   	<!--
	<query name="getRegistrationIdsForSingPostFileGeneration">
		<![CDATA[
			select r.id, c.legalId from Registration r, Candidate c
			where r.status = ?
			and r.subjectCount > 0
			and r.candidate.id = c.id
			and c.privateCentreId = 0
  		]]>
   	</query>
   	-->
   	
   	<!-- 
	<query name="getRegistrationByIdForSingPostFileGeneration">
		<![CDATA[
			select r from Registration r where r.id = ?
   		]]>
   	</query>
	-->
   	
   	<!-- 
	<query name="getRegistrationByIdForSingPostFileGeneration">
		<![CDATA[
			select r, c.legalId from Registration r, Candidate c
			where r.id = ? 
			and r.candidate.id = c.id
   		]]>
   	</query>
   	-->
	<query name="updateRegistrationByIdForSingPostFileGeneration">
		<![CDATA[
			update Registration r set r.status = ? where r.id = ?
   		]]>
   	</query>   	
   		
	<sql-query name="getRegistrationIdsForSingPostFileGeneration_sql">
		<return-scalar column="value" type="int"/>
			<![CDATA[
				select t.id, t2.id, count(t3.id)
				from tb_candidate t, tb_registration t2, tb_payment t3
				where t.privateCentreId = 0
				and t.id = t2.candidateId
				and t2.status = ?
				and t2.subjectCount > 0
				and t2.id = t3.registrationid
				group by t.id, t2.id
	   		]]>
	</sql-query>
   	
   	
   	
	<!-- Import SingPost Payment File -->
   	
	<query name="getRegistrationsForImportSingPostFile">
		<![CDATA[
			select r from Registration r, Candidate c
			where c.legalId = ?
			and c.privateCentreId = 0
			and c.id = r.candidate.id
			and r.examLevelCode = ? 
			and r.status = ?
   		]]>
   	</query>
   	
 	<!-- En-bloc payment -->
   	
	<query name="enBlocPaymentSearchCountNoPrivateCentre">
		<![CDATA[
			select count(r.id) from Registration r, Candidate c
			where r.status = ?
			and r.examLevelCode like ?
			and r.candidate.id = c.id
			and c.legalId like ?
			and c.name like ?
			and c.privateCentreId <> 0
                        and r.id not in (select distinct a.registrationId from PaymentApproval a where a.status = 'Pending')
  		]]>
   	</query>   	
	<query name="enBlocPaymentSearchDataNoPrivateCentre">
		<![CDATA[
			select r, c.legalId, p.name from Registration r, Candidate c, PrivateCentre p
			where r.status = ?
			and r.examLevelCode like ?
			and r.candidate.id = c.id
			and c.legalId like ?
			and c.name like ?
			and c.privateCentreId <> 0
			and c.privateCentreId = p.id
                        and r.id not in (select distinct a.registrationId from PaymentApproval a where a.status = 'Pending')
			order by r.examLevel, c.legalId, c.name
   		]]>
   	</query>
   	
	<query name="enBlocPaymentSearchCount">
		<![CDATA[
			select count(r.id) from Registration r, Candidate c
			where r.status = ?
			and r.examLevelCode like ?
			and r.candidate.id = c.id
			and c.legalId like ?
			and c.name like ?
			and c.privateCentreId = ?
                        and r.id not in (select distinct a.registrationId from PaymentApproval a where a.status = 'Pending')
  		]]>
   	</query>
	<query name="enBlocPaymentSearchData">
		<![CDATA[
			select r, c.legalId, p.name from Registration r, Candidate c, PrivateCentre p
			where r.status = ?
			and r.examLevelCode like ?
			and r.candidate.id = c.id
			and c.legalId like ?
			and c.name like ?
			and c.privateCentreId = ?
			and c.privateCentreId = p.id
                        and r.id not in (select distinct a.registrationId from PaymentApproval a where a.status = 'Pending')
			order by r.examLevel, c.legalId, c.name
   		]]>
   	</query>  	
   	
	<query name="getEnBlocPayments">
		<![CDATA[
			select r, c.privateCentreId from Registration r, Candidate c
			where r.id = ?
			and r.candidate.id = c.id
                        and r.id not in (select distinct a.registrationId from PaymentApproval a where a.status = 'Pending')
			order by r.examLevel, c.legalId, c.name
   		]]>
   	</query>  	

   	<!-- Registered Candidate File Generation -->

	<!-- (2009) -->
	<!-- 26 Mar 2013 Rey commented since not used anymore -->
	<!-- <query name="getRegistrationIdsForCandidatureFileGeneration">
		<![CDATA[
			select r.id from Registration r
			where r.subjectCount > 0
			and r.examLevelCode = ?
			and (r.status = 'R' or r.status = 'PP')
			order by r.name
  		]]>
   	</query> -->
   	
   	<!-- 26 Mar 2013 Rey commented since not used anymore -->
	<!-- <query name="getRegistrationByIdForCandidatureFileGeneration">
		<![CDATA[
			select r, c from Registration r, Candidate c
			where r.id = ?
			and r.candidate.id = c.id
			order by c.legalId
   		]]>
   	</query> -->
   	<!--	
	<query name="getRegistrationForCandidatureFileGeneration">
		<![CDATA[
			SELECT distinct r,
			  	   c
			FROM Registration r,
			  Candidate c
			WHERE r.candidate.id = c.id
			AND r.status        = 'R'
			AND r.financialAidFlag = 'N'
			AND r.examLevelCode = :examLevelCode
			AND (r.dateCreated >= to_date(:regPeriodStartDate, 'dd/mm/yyyy hh24:mi')
			AND r.dateCreated  <= to_date(:regPeriodEndDate, 'dd/mm/yyyy hh24:mi'))
			ORDER BY c.name
			

   		]]>
   	</query>   	
	-->
	<sql-query name="getRegistrationNotSelectpaymentOption">			
		<return alias="r" class="sg.gov.seab.iers.model.Registration"/>
		<return alias="c" class="sg.gov.seab.iers.model.Candidate"/>
		<![CDATA[
			SELECT distinct {r.*},{c.*} 
            FROM TB_REGISTRATION r,
                   TB_CANDIDATE c,
				   TB_PAYMENT pay
            WHERE 
					r.CANDIDATEID = c.id                    
                    AND r.examLevelCode =?
					AND (r.dateCreated >= to_date(?, 'dd/mm/yyyy hh24:mi')
					AND r.dateCreated  <= to_date(?, 'dd/mm/yyyy hh24:mi'))
                    AND r.STATUS='PP'
					AND r.REMINDERED NOT IN ( ? )
					AND r.ID=pay.REGISTRATIONID
					AND UPPER(pay.COLLECTIONAGENCY)='NONE'		
					AND r.ID IN (SELECT REGISTRATIONID FROM TB_REG_SUBJECT WHERE sysdate-dateCreated >1)
            ORDER BY c.name			
   		]]>
   	</sql-query>
   	<query name="updateRegistrationReminderStatus">
		<![CDATA[
			update Registration r set r.remindered = ? where r.id = ?
			)
		]]>
   	</query>
   	<sql-query name="getRegistrationNotAddedSubject">			
		<return alias="reg" class="sg.gov.seab.iers.model.Registration"/>
		<return alias="cddt" class="sg.gov.seab.iers.model.Candidate"/>
		<![CDATA[
			SELECT {reg.*},{cddt.*}
            FROM TB_CANDIDATE cddt, TB_REGISTRATION  reg
            WHERE 
             	reg.CANDIDATEID = cddt.id                    
                AND reg.examLevelCode =?
				AND (reg.dateCreated >= to_date(?, 'dd/mm/yyyy hh24:mi')
				AND reg.dateCreated  <= to_date(?, 'dd/mm/yyyy hh24:mi'))
				AND reg.REMINDADDSUBJ NOT IN (?)
			  	AND reg.STATUS = 'P'	
			  	AND sysdate-reg.dateCreated >1	
   		]]>
   	</sql-query>
   	<query name="updateAddSubjectReminderStatus">
		<![CDATA[
			update Registration r set r.remindAddSubj = ? where r.id = ?
			)
		]]>
   	</query>
	<sql-query name="getRegistrationReminderEndPayment">			
		<return alias="r" class="sg.gov.seab.iers.model.Registration"/>
		<return alias="c" class="sg.gov.seab.iers.model.Candidate"/>
		<![CDATA[
			SELECT distinct {r.*},{c.*} 
            FROM   TB_REGISTRATION r,
                   TB_CANDIDATE c,
                   TB_PAYMENT pay
            WHERE 
              r.CANDIDATEID = c.id
              AND r.STATUS NOT IN ('W','R')
              AND r.examLevelCode =?
              AND (r.dateCreated >= to_date(?, 'dd/mm/yyyy hh24:mi')
              AND r.dateCreated  <= to_date(?, 'dd/mm/yyyy hh24:mi'))              
              AND r.ID=pay.REGISTRATIONID
			  AND pay.REMINDERED NOT IN ( ? )
              AND pay.COLLECTIONAGENCY='SingPost'							
          ORDER BY c.name		
   		]]>
   	</sql-query>
	<query name="updatePaymentReminderStatus">
		<![CDATA[
			update Payment p set p.remindered = ? where p.id = ?
			)
		]]>
   	</query>	
	<sql-query name="getRegistrationForCandidatureFileGeneration">
		<return alias="r" class="sg.gov.seab.iers.model.Registration"/>
		<return alias="c" class="sg.gov.seab.iers.model.Candidate"/>
		<![CDATA[
			SELECT distinct {r.*},{c.*} 
            FROM TB_REGISTRATION r,
                   TB_CANDIDATE c,
					TB_PAYMENT pay	
            WHERE 
					r.CANDIDATEID = c.id 
					AND r.status           = 'R'                    
					AND r.financialAidFlag = 'N'										
                    AND r.examLevelCode =:examLevelCode
                    AND (r.dateCreated >= to_date(:regPeriodStartDate, 'dd/mm/yyyy hh24:mi')
					AND r.dateCreated  <= to_date(:regPeriodEndDate, 'dd/mm/yyyy hh24:mi'))
					AND r.ID=pay.REGISTRATIONID
					AND pay.COLLECTIONAGENCY='SingPost'		
            ORDER BY c.name			
   		]]>		
   	</sql-query>
	<sql-query name="getPaidRecordsForCandidatureFileGeneration">		
		<return alias="r" class="sg.gov.seab.iers.model.Registration"/>
		<return alias="c" class="sg.gov.seab.iers.model.Candidate"/>
		<![CDATA[
			SELECT distinct {r.*},{c.*} 
            FROM TB_REGISTRATION r,
                   TB_CANDIDATE c,
					TB_PAYMENT pay	
            WHERE 
					r.CANDIDATEID = c.id                 
					AND r.status           = 'R'                    
					AND r.financialAidFlag = 'N'	
                    AND r.examLevelCode =:examLevelCode
                    AND (r.dateCreated >= to_date(:regPeriodStartDate, 'dd/mm/yyyy hh24:mi')
					AND r.dateCreated  <= to_date(:regPeriodEndDate, 'dd/mm/yyyy hh24:mi'))
					AND r.ID=pay.REGISTRATIONID
					AND UPPER(pay.COLLECTIONAGENCY)='ENETS'		
            ORDER BY c.name
   		]]>				   	
   	</sql-query>  
   	<!--
   	<query name="getRegistrationForFASCandidatureFileGeneration">
		<![CDATA[
			SELECT distinct r,
			  	   c
			FROM Registration r,
			  Candidate c
			WHERE r.candidate.id = c.id
			AND r.status        = 'R'
			AND r.financialAidFlag = 'Y'
			AND r.examLevelCode = :examLevelCode
			AND (r.dateCreated >= to_date(:regPeriodStartDate, 'dd/mm/yyyy hh24:mi')
			AND r.dateCreated  <= to_date(:regPeriodEndDate, 'dd/mm/yyyy hh24:mi'))
			ORDER BY c.name
   		]]>
   	</query>   	
	-->
	<sql-query name="getRegistrationForFASCandidatureFileGeneration">
		<return alias="r" class="sg.gov.seab.iers.model.Registration"/>
		<return alias="c" class="sg.gov.seab.iers.model.Candidate"/>
		<![CDATA[
			SELECT distinct {r.*},{c.*} 
            FROM TB_REGISTRATION r,
                   TB_CANDIDATE c,
					TB_PAYMENT pay	
            WHERE 
					r.CANDIDATEID = c.id              
					AND r.status           = 'R'                    
					AND r.financialAidFlag = 'Y'										
                    AND r.examLevelCode =:examLevelCode
                    AND (r.dateCreated >= to_date(:regPeriodStartDate, 'dd/mm/yyyy hh24:mi')
					AND r.dateCreated  <= to_date(:regPeriodEndDate, 'dd/mm/yyyy hh24:mi'))
					AND r.ID=pay.REGISTRATIONID
					AND pay.COLLECTIONAGENCY='SingPost'		
            ORDER BY c.name
   		]]>		
   	</sql-query> 	
	<sql-query name="getPaidRecordsForFASCandidatureFileGeneration">
		<return alias="r" class="sg.gov.seab.iers.model.Registration"/>
		<return alias="c" class="sg.gov.seab.iers.model.Candidate"/>
		<![CDATA[
			SELECT distinct {r.*},{c.*} 
            FROM TB_REGISTRATION r,
                   TB_CANDIDATE c,
					TB_PAYMENT pay	
            WHERE 
					r.CANDIDATEID = c.id               
					AND r.status           = 'R'                    
					AND r.financialAidFlag = 'Y'					
                    AND r.examLevelCode =:examLevelCode
                    AND (r.dateCreated >= to_date(:regPeriodStartDate, 'dd/mm/yyyy hh24:mi')
					AND r.dateCreated  <= to_date(:regPeriodEndDate, 'dd/mm/yyyy hh24:mi'))
					AND r.ID=pay.REGISTRATIONID
					AND UPPER(pay.COLLECTIONAGENCY)='ENETS'		
            ORDER BY c.name
   		]]>			
   	</sql-query> 
   	
   	<sql-query name="getRegistrationForAmendRegCandidatureFileGeneration">
		<return alias="c" class="sg.gov.seab.iers.model.Candidate"/>
		<return-join alias="r" property="c.registrations"/>
    	<return-join alias="rs" property="r.registeredSubjects"/>
    	<![CDATA[
			SELECT distinct {c.*}, {r.*}, {rs.*}
			FROM TB_REGISTRATION r,
			  TB_CANDIDATE c,
			  TB_REG_SUBJECT rs
			WHERE r.candidateId    = c.id
			AND rs.registrationId = r.id
			AND r.status           = 'R'
			AND r.financialAidFlag = 'N'
			AND r.examLevelCode    = :examLevelCode
			AND (c.dateCreated    >= to_date(:regPeriodStartDate, 'dd/mm/yyyy hh24:mi')
			AND c.dateCreated     <= to_date(:regPeriodEndDate, 'dd/mm/yyyy hh24:mi'))
			AND (r.dateUpdated    >= to_date(:amendRegPeriodStartDate, 'dd/mm/yyyy hh24:mi')
			AND r.dateUpdated     <= to_date(:amendRegPeriodEndDate, 'dd/mm/yyyy hh24:mi'))
			AND r.dateCreated     <= to_date(:amendRegPeriodStartDate, 'dd/mm/yyyy hh24:mi')
			AND ((rs.dateUpdated  >= to_date(:amendRegPeriodStartDate, 'dd/mm/yyyy hh24:mi')
			AND rs.dateUpdated    <= to_date(:amendRegPeriodEndDate, 'dd/mm/yyyy hh24:mi'))
			OR ( rs.dateCreated   >= to_date(:amendRegPeriodStartDate, 'dd/mm/yyyy hh24:mi')
			AND rs.dateCreated    <= to_date(:amendRegPeriodEndDate, 'dd/mm/yyyy hh24:mi')) )
			ORDER BY c.name
		]]>
   	</sql-query>
   	
   <!-- 	<query name="getRegistrationForAmendRegCandidatureFileGeneration">
		<![CDATA[
			SELECT distinct r,
				   c
			FROM Registration r,
			  Candidate c,
			  RegisteredSubject rs
			WHERE r.candidate.id    = c.id
			AND rs.registration.id = r.id
			AND r.status           = 'R'
			AND r.examLevelCode    = :examLevelCode
			AND (c.dateCreated    >= to_date(:regPeriodStartDate, 'dd/mm/yyyy hh24:mi')
			AND c.dateCreated     <= to_date(:regPeriodEndDate, 'dd/mm/yyyy hh24:mi'))
			AND (r.dateUpdated  >= to_date(:amendRegPeriodStartDate, 'dd/mm/yyyy hh24:mi')
			AND r.dateUpdated    <= to_date(:amendRegPeriodEndDate, 'dd/mm/yyyy hh24:mi'))
			AND ((rs.dateUpdated  >= to_date(:amendRegPeriodStartDate, 'dd/mm/yyyy hh24:mi')
			AND rs.dateUpdated    <= to_date(:amendRegPeriodEndDate, 'dd/mm/yyyy hh24:mi'))
			OR ( rs.dateCreated   >= to_date(:amendRegPeriodStartDate, 'dd/mm/yyyy hh24:mi')
			AND rs.dateCreated    <= to_date(:amendRegPeriodEndDate, 'dd/mm/yyyy hh24:mi')) )
			ORDER BY c.name
   		]]>
   	</query>   	 -->
   	
   	<query name="getRegistrationForAmendPartCandidatureFileGeneration">
		<![CDATA[
			SELECT DISTINCT r,
			 				c
			FROM CandidateAudit ca,
			  Registration r,
			  Candidate c
			WHERE ca.columnName != 'UPDATEDBY'
			AND ca.columnName   != 'VERSION'
			AND ca.columnName   != 'DATEUPDATED'
			AND r.candidate.id    = c.id
			AND ca.candidateId   = c.id
			AND r.status         = 'R'
			AND r.financialAidFlag = 'N'
			AND r.examLevelCode  = :examLevelCode
			AND (c.dateCreated  >= to_date(:regPeriodStartDate, 'dd/mm/yyyy hh24:mi')
			AND c.dateCreated   <= to_date(:regPeriodEndDate, 'dd/mm/yyyy hh24:mi'))
			AND (ca.timestamp  >= to_date(:amendRegPeriodStartDate, 'dd/mm/yyyy hh24:mi')
			AND ca.timestamp    <= to_date(:amendRegPeriodEndDate, 'dd/mm/yyyy hh24:mi'))
			AND ca.transId       =
			  (SELECT MAX(ca2.transId)
			  FROM CandidateAudit ca2
			  WHERE ca2.candidateId = ca.candidateId
			  AND ca2.columnName    = ca.columnName
			  )
			ORDER BY c.id
   		]]>
   	</query>
   	
   	<query name="getCandidateAuditForAmendPartCandidatureFileGeneration">
		<![CDATA[
			SELECT DISTINCT ca
			FROM CandidateAudit ca,
			  Registration r,
			  Candidate c
			WHERE ca.columnName != 'UPDATEDBY'
			AND ca.columnName   != 'VERSION'
			AND ca.columnName   != 'DATEUPDATED'
			AND r.candidate.id    = c.id
			AND ca.candidateId   = c.id
			AND r.status         = 'R'
			AND r.financialAidFlag = 'N'
			AND r.examLevelCode  = :examLevelCode
			AND (c.dateCreated  >= to_date(:regPeriodStartDate, 'dd/mm/yyyy hh24:mi')
			AND c.dateCreated   <= to_date(:regPeriodEndDate, 'dd/mm/yyyy hh24:mi'))
			AND (ca.timestamp  >= to_date(:amendRegPeriodStartDate, 'dd/mm/yyyy hh24:mi')
			AND ca.timestamp    <= to_date(:amendRegPeriodEndDate, 'dd/mm/yyyy hh24:mi'))
			AND ca.transId       =
			  (SELECT MAX(ca2.transId)
			  FROM CandidateAudit ca2
			  WHERE ca2.candidateId = ca.candidateId
			  AND ca2.columnName    = ca.columnName
			  )
			ORDER BY ca.candidateId,
			  ca.columnName
   		]]>
   	</query>  
   	
   	<query name="getRegSubjAuditForAmendRegCandidatureFileGeneration">
        <![CDATA[
	   	   SELECT DISTINCT rsa
			FROM Candidate c,
			  Registration r,
			  RegisteredSubject rs,
			  RegSubjectAudit rsa
			WHERE (rsa.columnName  = 'MIDYEARINDICATOR'
			OR rsa.columnName      = 'PAPEROPTIONS')
			AND r.candidate.id      = c.id
			AND rs.registration.id  = r.id
			AND rsa.regSubjectId   = rs.id
			AND r.status           = 'R'
			AND r.financialAidFlag = 'N'
			AND r.examLevelCode    = :examLevelCode
			AND (c.dateCreated    >= to_date(:regPeriodStartDate, 'dd/mm/yyyy hh24:mi')
			AND c.dateCreated     <= to_date(:regPeriodEndDate, 'dd/mm/yyyy hh24:mi'))
			AND (rsa.timestamp    >= to_date(:amendRegPeriodStartDate, 'dd/mm/yyyy hh24:mi')
			AND rsa.timestamp     <= to_date(:amendRegPeriodEndDate, 'dd/mm/yyyy hh24:mi'))
			AND rsa.transId        =
			  (SELECT MAX(rsa2.transId)
			  FROM RegSubjectAudit rsa2
			  WHERE rsa2.regSubjectId = rsa.regSubjectId
			  AND rsa2.columnName     = rsa.columnName
			  )
			ORDER BY rsa.regSubjectId,
			  rsa.columnName
   	    ]]>
    </query>
    
   	<!-- Archive Unpaid Subject Registrations -->
   
   <!-- return only the properties we need to save memory
   		specially when we would be processing thousands of records
   				r.ID as regId,
				r.candidateId as candidateId,
				r.VERSION as version,
				r.EXAMLEVELCODE as examLevelCode,
				s.ID as regSubjId
    -->	
   <sql-query name="getRegSubjByLevelPendingPaymentForArchiving">
    	<return-scalar column="registrationId" type="long"/>
    	<return-scalar column="candidateId" type="long"/>
    	<return-scalar column="legalId" type="string"/>
    	<return-scalar column="registrationVersion" type="int"/>
    	<return-scalar column="examLevelCode" type="string"/>
    	<return-scalar column="registeredSubjectId" type="long"/>
		<![CDATA[
			SELECT DISTINCT r.id AS registrationId,
			  r.candidateId,
			  c.legalId,
			  r.version AS registrationVersion,
			  r.examLevelCode,
			  s.ID AS registeredSubjectId
			FROM TB_REGISTRATION r,
			  TB_PAYMENT p,
			  TB_REG_SUBJECT s,
			  TB_CANDIDATE c
			WHERE r.examLevelCode  = :examLevelCode
			AND r.id               = s.registrationid
			AND r.id               = p.registrationid
			AND r.status          != 'W'
			AND r.status          != 'R'
			AND p.status           = 'Pending'
			AND p.itemIds         LIKE '%' || s.id || '%'
			AND r.financialAidFlag = 'N'
			AND (c.dateCreated    >= to_date(:regPeriodStartDate, 'dd/mm/yyyy hh24:mi')
			AND c.dateCreated     <= to_date(:regPeriodEndDate, 'dd/mm/yyyy hh24:mi'))
			AND r.candidateId      = c.id
			UNION
			SELECT DISTINCT NULL AS registrationId,
			  c.id               AS candidateId,
			  c.legalId,
			  0    AS registrationVersion,
			  NULL AS examLevelCode,
			  NULL AS registeredSubjectId
			FROM TB_CANDIDATE c
			WHERE c.ID NOT IN
			  (SELECT r.CANDIDATEID
			  FROM TB_REG_SUBJECT rs,
			    TB_REGISTRATION r
			  WHERE rs.REGISTRATIONID = r.ID
			  AND rs.status           = 'Registered'
			  )
			AND (c.dateCreated >= to_date(:regPeriodStartDate, 'dd/mm/yyyy hh24:mi')
			AND c.dateCreated  <= to_date(:regPeriodEndDate, 'dd/mm/yyyy hh24:mi'))
			ORDER BY 2
   		]]>
   	</sql-query>
   	
	<sql-query name="deleteRegistrationWithNoRegSubj">
		<![CDATA[
			DELETE
			FROM TB_REGISTRATION r,
			  TB_CANDIDATE c
			WHERE r.subjectCount   = 0
			AND r.examLevelCode    = :examLevelCode
			AND r.financialAidFlag = 'N'
			AND (c.dateCreated    >= to_date(:regPeriodStartDate, 'dd/mm/yyyy hh24:mi')
			AND c.dateCreated     <= to_date(:regPeriodEndDate, 'dd/mm/yyyy hh24:mi'))
			AND r.candidateId      = c.id
		]]>
   	</sql-query>
   	
   	<sql-query name="deleteRegistrationArchiveForArchiving">
   		<![CDATA[
			DELETE
			FROM TB_REGISTRATION_ARCHIVE ra
			WHERE ra.id IN
			  ( SELECT DISTINCT r.id
			  FROM TB_REGISTRATION r,
			    TB_PAYMENT p,
			    TB_REG_SUBJECT s,
			    TB_CANDIDATE c
			  WHERE r.examLevelCode  = :examLevelCode
			  AND r.id               = s.registrationid
			  AND r.id               = p.registrationid
			  AND r.status          != 'W'
			  AND r.status          != 'R'
			  AND p.status           = 'Pending'
  			  AND p.itemIds         LIKE '%' || s.id || '%'
			  AND r.financialAidFlag = 'N'
			  AND (c.dateCreated    >= to_date(:regPeriodStartDate, 'dd/mm/yyyy hh24:mi')
			  AND c.dateCreated     <= to_date(:regPeriodEndDate, 'dd/mm/yyyy hh24:mi'))
			  AND r.candidateId      = c.id
			)
		]]>
   	</sql-query>
   	
   	<sql-query name="deleteRegSubjectArchiveForArchiving">
   		<![CDATA[
   			DELETE
			FROM TB_REG_SUBJECT_ARCHIVE rsa
			WHERE rsa.id IN
			  ( SELECT DISTINCT s.id
			  FROM TB_REGISTRATION r,
			    TB_PAYMENT p,
			    TB_REG_SUBJECT s,
			    TB_CANDIDATE c
			  WHERE r.examLevelCode  = :examLevelCode
			  AND r.id               = s.registrationid
			  AND r.id               = p.registrationid
			  AND r.status          != 'W'
			  AND r.status          != 'R'
			  AND p.status           = 'Pending'
			  AND p.itemIds         LIKE '%' || s.id || '%'
			  AND r.financialAidFlag = 'N'
			  AND (c.dateCreated    >= to_date(:regPeriodStartDate, 'dd/mm/yyyy hh24:mi')
			  AND c.dateCreated     <= to_date(:regPeriodEndDate, 'dd/mm/yyyy hh24:mi'))
			  AND r.candidateId      = c.id
			)
		]]>
   	</sql-query>
   	
	<sql-query name="deletePaymentArchiveForArchiving">
		<![CDATA[
			DELETE
			FROM TB_PAYMENT_ARCHIVE pa
			WHERE pa.id IN
			  ( SELECT DISTINCT p.id
			  FROM TB_REGISTRATION r,
			    TB_PAYMENT p,
			    TB_REG_SUBJECT s,
			    TB_CANDIDATE c
			  WHERE r.examLevelCode  = :examLevelCode
			  AND r.id               = s.registrationid
			  AND r.id               = p.registrationid
			  AND r.status          != 'W'
			  AND r.status          != 'R'
			  AND p.status           = 'Pending'
			  AND p.itemIds         LIKE '%' || s.id || '%'
			  AND r.financialAidFlag = 'N'
			  AND (c.dateCreated    >= to_date(:regPeriodStartDate, 'dd/mm/yyyy hh24:mi')
			  AND c.dateCreated     <= to_date(:regPeriodEndDate, 'dd/mm/yyyy hh24:mi'))
			  AND r.candidateId      = c.id
			)
		]]>
   	</sql-query>
   	
   	<sql-query name="archiveCandidate">
   		<![CDATA[
   		INSERT
		INTO TB_CANDIDATE_ARCHIVE ca
		  (
		    ca.ID,
			ca.VERSION,
			ca.LEGALID,
			ca.LEGALTYPE,
			ca.NAME,
			ca.DATEOFBIRTH,
			ca.SINGAPOREPRFLAG,
			ca.STATELESSFLAG,
			ca.USERID,
			ca.BLOCKNO,
			ca.UNIT,
			ca.STREET,
			ca.POSTALCODE,
			ca.ADDRESSTYPE,
			ca.DEFAULTCONTACTFLAG,
			ca.TELEPHONE,
			ca.HANDPHONE,
			ca.EMAIL,
			ca.GENDER,
			ca.EXEMPTION,
			ca.PRIVATECENTREID,
			ca.NATIONALITY,
			ca.RACE,
			ca.DATECREATED,
			ca.PAYEE,
			ca.UPDATEDBY,
			ca.DATEUPDATED,
			ca.CREATEDBY,
			ca.FLOOR,
			ca.FNADDR1,
			ca.FNADDR2,
			ca.FNADDR3,
			ca.BUILDING,
			ca.CITIZENSHIP,
			ca.NEWCITIZENSHIP,
			ca.CITIZENSHIPCHANGEDATE,
			ca.NEWNATIONALITY,
			ca.ARCHIVEDBY,
			ca.DATEARCHIVED
		  )
		SELECT distinct
			c.ID,
			c.VERSION,
			c.LEGALID,
			c.LEGALTYPE,
			c.NAME,
			c.DATEOFBIRTH,
			c.SINGAPOREPRFLAG,
			c.STATELESSFLAG,
			c.USERID,
			c.BLOCKNO,
			c.UNIT,
			c.STREET,
			c.POSTALCODE,
			c.ADDRESSTYPE,
			c.DEFAULTCONTACTFLAG,
			c.TELEPHONE,
			c.HANDPHONE,
			c.EMAIL,
			c.GENDER,
			c.EXEMPTION,
			c.PRIVATECENTREID,
			c.NATIONALITY,
			c.RACE,
			c.DATECREATED,
			c.PAYEE,
			c.UPDATEDBY,
			c.DATEUPDATED,
			c.CREATEDBY,
			c.FLOOR,
			c.FNADDR1,
			c.FNADDR2,
			c.FNADDR3,
			c.BUILDING,
			c.CITIZENSHIP,
			c.NEWCITIZENSHIP,
			c.CITIZENSHIPCHANGEDATE,
			c.NEWNATIONALITY,
		  :archivedBy,
		  :dateArchived
		FROM TB_REGISTRATION r,
		  TB_PAYMENT p,
		  TB_REG_SUBJECT s,
		  TB_CANDIDATE c
		WHERE r.examLevelCode  = :examLevelCode
		AND r.ID               = s.registrationid
		AND r.id               = p.registrationid
		AND r.status          != 'W'
		AND p.status           = 'Pending'
		AND p.itemIds         LIKE '%' || s.id || '%'
		AND r.status 		  != 'R'
		AND r.financialAidFlag = 'N'
	    AND (c.dateCreated     >= to_date(:regPeriodStartDate, 'dd/mm/yyyy hh24:mi')
		AND c.dateCreated      <= to_date(:regPeriodEndDate, 'dd/mm/yyyy hh24:mi'))
    	AND r.candidateId      = c.ID
    	UNION
		SELECT distinct
			c.ID,
			c.VERSION,
			c.LEGALID,
			c.LEGALTYPE,
			c.NAME,
			c.DATEOFBIRTH,
			c.SINGAPOREPRFLAG,
			c.STATELESSFLAG,
			c.USERID,
			c.BLOCKNO,
			c.UNIT,
			c.STREET,
			c.POSTALCODE,
			c.ADDRESSTYPE,
			c.DEFAULTCONTACTFLAG,
			c.TELEPHONE,
			c.HANDPHONE,
			c.EMAIL,
			c.GENDER,
			c.EXEMPTION,
			c.PRIVATECENTREID,
			c.NATIONALITY,
			c.RACE,
			c.DATECREATED,
			c.PAYEE,
			c.UPDATEDBY,
			c.DATEUPDATED,
			c.CREATEDBY,
			c.FLOOR,
			c.FNADDR1,
			c.FNADDR2,
			c.FNADDR3,
			c.BUILDING,
			c.CITIZENSHIP,
			c.NEWCITIZENSHIP,
			c.CITIZENSHIPCHANGEDATE,
			c.NEWNATIONALITY,
		  :archivedBy,
		  :dateArchived
		FROM TB_CANDIDATE c
		WHERE c.ID NOT IN
		  (SELECT r.CANDIDATEID
		  FROM TB_REG_SUBJECT rs,
		    TB_REGISTRATION r
		  WHERE rs.REGISTRATIONID = r.ID
		  AND rs.status           = 'Registered'
		  )
		AND (c.dateCreated >= to_date(:regPeriodStartDate, 'dd/mm/yyyy hh24:mi')
		AND c.dateCreated  <= to_date(:regPeriodEndDate, 'dd/mm/yyyy hh24:mi'))
		]]>
   	</sql-query>
   	
   	<sql-query name="archiveRegistration">
   		<![CDATA[
   		INSERT
		INTO TB_REGISTRATION_ARCHIVE ra
		  (
		    ra.ID,
		    ra.VERSION,
		    ra.CANDIDATEID,
		    ra.EXAMLEVEL,
		    ra.STATUS,
		    ra.NAME,
		    ra.UPDATEDBY,
		    ra.DATEUPDATED,
		    ra.LEGALID,
		    ra.SUBJECTCOUNT,
		    ra.CREATEDBY,
		    ra.DATECREATED,
		    ra.EXAMLEVELCODE,
		    ra.SINGPOST_STATUS,
		    ra.FINANCIALAIDFLAG,
		    ra.DATETAGGED,
            ra.TAGGEDBY,
		    ra.ARCHIVEDBY,
		    ra.DATEARCHIVED
		  )
		SELECT distinct r.ID,
		  r.VERSION,
		  r.CANDIDATEID,
		  r.EXAMLEVEL,
		  r.STATUS,
		  r.NAME,
		  r.UPDATEDBY,
		  r.DATEUPDATED,
		  r.LEGALID,
		  r.SUBJECTCOUNT,
		  r.CREATEDBY,
		  r.DATECREATED,
		  r.EXAMLEVELCODE,
		  r.SINGPOST_STATUS,
		  r.FINANCIALAIDFLAG,
          r.DATETAGGED,
          r.TAGGEDBY,
		  :archivedBy,
		  :dateArchived
		FROM TB_REGISTRATION r,
		  TB_PAYMENT p,
		  TB_REG_SUBJECT s,
		  TB_CANDIDATE c
		WHERE r.examLevelCode  = :examLevelCode
		AND r.ID               = s.registrationid
		AND r.id               = p.registrationid
		AND r.status          != 'W'
		AND p.status           = 'Pending'
		AND p.itemIds         LIKE '%' || s.id || '%'
		AND r.status 		  != 'R'
		AND r.financialAidFlag = 'N'
	    AND (c.dateCreated     >= to_date(:regPeriodStartDate, 'dd/mm/yyyy hh24:mi')
		AND c.dateCreated      <= to_date(:regPeriodEndDate, 'dd/mm/yyyy hh24:mi'))
    	AND r.candidateId      = c.ID
		]]>
   	</sql-query>
   	
   	<sql-query name="archiveRegSubject">
   		<![CDATA[
   		INSERT
		INTO TB_REG_SUBJECT_ARCHIVE rsa
		  (
		  	rsa.ID,
			rsa.VERSION,
			rsa.REGISTRATIONID,
			rsa.SUBJECTID,
			rsa.STATUS,
			rsa.PAPEROPTIONS,
			rsa.SUBJECTFEE,
			rsa.MIDYEARINDICATOR,
			rsa.PAPERDISPLAY,
			rsa.CODE,
			rsa.NAME,
			rsa.PAPEROPTIONSHISTORY,
			rsa.PAPERDISPLAYHISTORY,
			rsa.REFUNDSUBJECTFEE,
			rsa.CREATEDBY,
			rsa.DATECREATED,
			rsa.UPDATEDBY,
			rsa.DATEUPDATED,
			rsa.MEDIUM,
			rsa.ARCHIVEDBY,
			rsa.DATEARCHIVED
		  )
		SELECT distinct s.ID,
			s.VERSION,
			s.REGISTRATIONID,
			s.SUBJECTID,
			s.STATUS,
			s.PAPEROPTIONS,
			s.SUBJECTFEE,
			s.MIDYEARINDICATOR,
			s.PAPERDISPLAY,
			s.CODE,
			s.NAME,
			s.PAPEROPTIONSHISTORY,
			s.PAPERDISPLAYHISTORY,
			s.REFUNDSUBJECTFEE,
			s.CREATEDBY,
			s.DATECREATED,
			s.UPDATEDBY,
			s.DATEUPDATED,
			s.MEDIUM,
		  	:archivedBy,
		  	:dateArchived
		FROM TB_REGISTRATION r,
		  TB_PAYMENT p,
		  TB_REG_SUBJECT s,
		  TB_CANDIDATE c
		WHERE r.examLevelCode  = :examLevelCode
		AND r.ID               = s.registrationid
		AND r.id               = p.registrationid
		AND r.status          != 'W'
		AND r.status 		  != 'R'
		AND p.status           = 'Pending'
		AND p.itemIds         LIKE '%' || s.id || '%'
		AND r.financialAidFlag = 'N'
	    AND (c.dateCreated     >= to_date(:regPeriodStartDate, 'dd/mm/yyyy hh24:mi')
		AND c.dateCreated      <= to_date(:regPeriodEndDate, 'dd/mm/yyyy hh24:mi'))
    	AND r.candidateId      = c.ID
		]]>
   	</sql-query>
   	
   	<sql-query name="archivePayment">
   		<![CDATA[
   		INSERT
		INTO TB_PAYMENT_ARCHIVE pa
		  (
		  	pa.ID,
			pa.VERSION,
			pa.REGISTRATIONID,
			pa.ITEMIDS,
			pa.OFFSETITEMIDS,
			pa.REFERENCENO,
			pa.STATUS,
			pa.DATEISSUED,
			pa.DATESETTLED,
			pa.BASICFEE,
			pa.SUBJECTFEE,
			pa.AMENDMENTFEE,
			pa.LATEENTRYFEE,
			pa.GST,
			pa.GSTROUNDED,
			pa.GSTDIFFERENCE,
			pa.REFUNDBASICFEE,
			pa.REFUNDSUBJECTFEE,
			pa.REFUNDAMENDMENTFEE,
			pa.REFUNDLATEENTRYFEE,
			pa.REFUNDGST,
			pa.REFUNDGSTROUNDED,
			pa.REFUNDGSTDIFFERENCE,
			pa.TOTAL,
			pa.TOTALREFUND,
			pa.AMOUNTSETTLED,
			pa.BALANCE,
			pa.PAYMENTMODE,
			pa.COLLECTIONAGENCY,
			pa.PAYMENTREFERENCE,
			pa.UPDATEDBY,
			pa.DATEUPDATED,
			pa.CAMBRIDGEBASICFEE,
			pa.REFUNDCAMBRIDGEBASICFEE,
			pa.CREATEDBY,
			pa.DATECREATED,
			pa.REGPERIODCODE,
			pa.ARCHIVEDBY,
			pa.DATEARCHIVED
		  )
		SELECT distinct
			p.ID,
			p.VERSION,
			p.REGISTRATIONID,
			p.ITEMIDS,
			p.OFFSETITEMIDS,
			p.REFERENCENO,
			p.STATUS,
			p.DATEISSUED,
			p.DATESETTLED,
			p.BASICFEE,
			p.SUBJECTFEE,
			p.AMENDMENTFEE,
			p.LATEENTRYFEE,
			p.GST,
			p.GSTROUNDED,
			p.GSTDIFFERENCE,
			p.REFUNDBASICFEE,
			p.REFUNDSUBJECTFEE,
			p.REFUNDAMENDMENTFEE,
			p.REFUNDLATEENTRYFEE,
			p.REFUNDGST,
			p.REFUNDGSTROUNDED,
			p.REFUNDGSTDIFFERENCE,
			p.TOTAL,
			p.TOTALREFUND,
			p.AMOUNTSETTLED,
			p.BALANCE,
			p.PAYMENTMODE,
			p.COLLECTIONAGENCY,
			p.PAYMENTREFERENCE,
			p.UPDATEDBY,
			p.DATEUPDATED,
			p.CAMBRIDGEBASICFEE,
			p.REFUNDCAMBRIDGEBASICFEE,
			p.CREATEDBY,
			p.DATECREATED,
			p.REGPERIODCODE,
		  	:archivedBy,
		  	:dateArchived
		FROM TB_REGISTRATION r,
		  TB_PAYMENT p,
		  TB_REG_SUBJECT s,
		  TB_CANDIDATE c
		WHERE r.examLevelCode  = :examLevelCode
		AND r.ID               = s.registrationid
		AND r.id               = p.registrationid
		AND r.status          != 'W'
		AND r.status 		  != 'R'
		AND p.status           = 'Pending'
		AND p.itemIds         LIKE '%' || s.id || '%'
		AND r.financialAidFlag = 'N'
	    AND (c.dateCreated     >= to_date(:regPeriodStartDate, 'dd/mm/yyyy hh24:mi')
		AND c.dateCreated      <= to_date(:regPeriodEndDate, 'dd/mm/yyyy hh24:mi'))
    	AND r.candidateId      = c.ID
		]]>
   	</sql-query>
   	
   	<query name="getRegistrationArchiveByCddtIdExamLevel">
		<![CDATA[
			select ra from RegistrationArchive ra
			where ra.candidate.id = ? and ra.examLevelCode = ? 
   		]]>
   	</query>
   	
	<!-- Normal queries -->	
	
	<query name="getRegistrationForPrivateCentreCandidate">
		<![CDATA[
			select r from Registration r, Candidate c
			where c.legalId = ?
			and c.id = r.candidate.id
			and c.privateCentreId > 0
			and r.examLevelCode = ?
   		]]>
   	</query>
   	
	<query name="countRegistrationForPrivateCentreCandidate">
		<![CDATA[
			select count(r.id) from Registration r, Candidate c
			where c.legalId = ?
			and c.id = r.candidate.id
			and c.privateCentreId > 0
			and r.examLevelCode = ?
   		]]>
   	</query>
   	
	<query name="countRegistrationForPrivateCandidate">
		<![CDATA[
			select count(r.id) from Registration r, Candidate c
			where c.legalId = ?
			and c.id = r.candidate.id
			and c.privateCentreId = 0
			and r.examLevelCode = ?
   		]]>
   	</query> 
  
	<query name="updateRegistrationLegalId">
		<![CDATA[
			update Registration r set r.legalId = ? where r.candidate.id = ?
   		]]>
   	</query> 
   	
	<query name="updateRegistrationName">
		<![CDATA[
			update Registration r set r.name = ? where r.candidate.id = ?
   		]]>
   	</query> 
   	
	<!-- Cross exam-level registration retriever -->	

	<query name="getRegistrationForCrossExamLevelCheck">
		<![CDATA[
			select r from Registration r, Candidate c
			where c.legalId = ?
			and c.id = r.candidate.id
			and r.examLevelCode = ?
			and r.status <> ?
   		]]>
   	</query>
   	
	<!-- Deleting registrations -->	

	<query name="deleteCandidateRegistrations">
		<![CDATA[
			delete from Registration r where r.candidate.id = ?
   		]]>
   	</query>
        
       <!-- Payment Approval -->
 
        <query name="paymentApprovalSearchCount">
		<![CDATA[
			select count(a.id) 
			from PaymentApproval a, Registration r, Candidate c
            where a.status like ?
				and a.status <> 'Reversed'
	            and a.registrationId = r.id
				and r.examLevelCode like ?
				and r.candidate.id = c.id
				and c.legalId like ?
				and c.name like ?
				and c.privateCentreId = ?
				and a.paymentUpdateMode is null
  		]]>
   		</query>
        
        <query name="paymentApprovalSearchData">
		<![CDATA[
		    select a, r, c.legalId, p.name 
		    from PaymentApproval a, Registration r, Candidate c, PrivateCentre p
			where a.status like ?
				and a.status <> 'Reversed'
	            and a.registrationId = r.id 
				and r.examLevelCode like ?
				and r.candidate.id = c.id
				and c.legalId like ?
				and c.name like ?                        
				and c.privateCentreId = ?
				and c.privateCentreId = p.id
				and a.paymentUpdateMode is null
			order by r.examLevel, c.legalId, c.name
   		]]>
   		</query> 
   		
        <query name="paymentApprovalSearchCountPrivateCandidate">
		<![CDATA[
			select count(a.id) 
			from PaymentApproval a, Registration r, Candidate c
            where a.status like ?
				and a.status <> 'Reversed'
	            and a.registrationId = r.id
				and r.examLevelCode like ?
				and r.candidate.id = c.id
				and c.legalId like ?
				and c.name like ?
				and c.privateCentreId = ?
				and a.paymentUpdateMode = ?
  		]]>
   		</query>
        
        <query name="paymentApprovalSearchDataPrivateCandidate">
		<![CDATA[
		    select a, r, c.legalId, p.name 
		    from PaymentApproval a, Registration r, Candidate c, PrivateCentre p
			where a.status like ?
				and a.status <> 'Reversed'
	            and a.registrationId = r.id 
				and r.examLevelCode like ?
				and r.candidate.id = c.id
				and c.legalId like ?
				and c.name like ?                        
				and c.privateCentreId = ?
				and c.privateCentreId = p.id
				and a.paymentUpdateMode = ?
			order by r.examLevel, c.legalId, c.name
   		]]>
   		</query>  
        
        <query name="paymentApprovalSearchCountNoPrivateCentre">
		<![CDATA[
			select count(a.id) from PaymentApproval a, Registration r, Candidate c
			where a.status like ?
			and a.status <> 'Reversed'
                        and a.registrationId = r.id
			and r.examLevelCode like ?
			and r.candidate.id = c.id
			and c.legalId like ?
			and c.name like ?
			
  		]]>
   	</query>  
<!--	and c.privateCentreId <> 0-->
                
        <query name="paymentApprovalSearchDataNoPrivateCentre">
		<![CDATA[
			select a, r, c.legalId, p.name from PaymentApproval a, Registration r, Candidate c, PrivateCentre p
			where a.status like ?
			and a.status <> 'Reversed'
                        and r.id = a.registrationId
			and r.examLevelCode like ?
			and r.candidate.id = c.id
			and c.legalId like ?
			and c.name like ?
			and c.privateCentreId = p.id
			order by r.examLevel, c.legalId, c.name
   		]]>
   	</query>
<!--	and c.privateCentreId <> 0-->
                
        <query name="updateApprovalPaymentStatus">
		<![CDATA[
		        update PaymentApproval pa set pa.status = ? where pa.payment.id = ?
   		]]>
   	</query>
        
        <query name="getPaymentObject">
		<![CDATA[
		        select p from Payment p where p.id = ?
   		]]>
   	</query>
        
        <query name="getPaymentApprovalObject">
		<![CDATA[
		        select pa from PaymentApproval pa where pa.payment.id = ?
   		]]>
   	</query>
   	
   	<query name="getPaymentApprovalByRegistrationId">
		<![CDATA[
		        select pa from PaymentApproval pa where pa.registrationId = ?
   		]]>
   	</query>
    
    <!-- Calculate fees for registered subject -->
   	<sql-query name="getRegSubjectsFromAuditWithinRegPeriod">
	<return alias="rs" class="sg.gov.seab.iers.model.RegisteredSubject"/>
   	<![CDATA[
		select ID, REGISTRATIONID, STATUS, SUBJECTFEE
		from (
		      SELECT DISTINCT RSA.REGSUBJECTID ID,
		        MAX(DECODE(RSA.COLUMNNAME, 'REGISTRATIONID', RSA.NEWVALUE, NULL)) REGISTRATIONID,
		        MAX(DECODE(RSA.COLUMNNAME, 'STATUS', RSA.NEWVALUE, NULL)) STATUS,
		        MAX(DECODE(RSA.COLUMNNAME, 'SUBJECTFEE', RSA.NEWVALUE, NULL)) SUBJECTFEE
		      FROM TB_REG_SUBJECT_AUDIT RSA
		      WHERE RSA.COLUMNNAME IN ('REGISTRATIONID', 'STATUS', 'SUBJECTFEE')
		      and (RSA.timestamp   >= TO_DATE(:REGPERIODSTARTDATE, 'dd/mm/yyyy hh24:mi')
		      and RSA.timestamp    <= TO_DATE(:REGPERIODENDDATE, 'dd/mm/yyyy hh24:mi'))
		      AND RSA.TRANSID       =
		        (SELECT MAX(RSA2.TRANSID)
		        FROM TB_REG_SUBJECT_AUDIT RSA2
		        WHERE RSA2.REGSUBJECTID = RSA.REGSUBJECTID
		        AND RSA2.COLUMNNAME     = RSA.COLUMNNAME
		        )
		      GROUP BY RSA.REGSUBJECTID
		)
		where REGISTRATIONID = :REGISTRATIONID;
	]]>
   	</sql-query>
   	
</hibernate-mapping>
